#!/usr/local/bin/python3.5

# import modules
import builtins
import argparse
import os.path
import sys
import importlib

# set the path to the directory containing this script
builtins.scriptDirectory = os.path.dirname(os.path.realpath(__file__))

# work out whether this is an installed or non installed version
# and include this scripts directories in the path
if (builtins.scriptDirectory == "/usr/local/sbin"):
    sys.path.insert(0, "/usr/local/lib/tredly-validate")
    sys.path.insert(0, "/usr/local/lib/tredly/python-common")
    builtins.tredlyConfDirectory = "/usr/local/etc/tredly"
    builtins.tredlyJsonDirectory = "/usr/local/etc/tredly/json"
else:
    print("\033[43m\033[97mWARNING: Running from non installed location\033[49m\033[39m")
    sys.path.insert(0, builtins.scriptDirectory)
    sys.path.insert(0, builtins.scriptDirectory + "/../tredly-libs/python-common")
    sys.path.insert(0, builtins.scriptDirectory + "/tests")
    builtins.tredlyConfDirectory = builtins.scriptDirectory + "/../tredly/conf"
    builtins.tredlyJsonDirectory = builtins.scriptDirectory + "/../../json"

# import modules

# include global modules
from includes.defines import *
from includes.util import *
from includes.output import *

# set some constants
SHOW_HELP = False
DEBUG = False
VERBOSE= False
SCRIPTNAME = os.path.basename(__file__)

# get an argparser object
argParser = argparse.ArgumentParser(description=SCRIPTNAME)

# set up arguments in argparser
argParser.add_argument('action', nargs='?', help='init create destroy list modify replace')
argParser.add_argument('subject', nargs='?', help='container etc')
argParser.add_argument('target', nargs='?', help='partition etc')
argParser.add_argument('identifier', nargs='?', help='identifier - uuid etc')

argParser.add_argument('--containerName', help='Override container name')
argParser.add_argument('--ip4_addr', help='Override container networking. eg --ip4_addr="bridge0|192.168.0.5/24"')
argParser.add_argument('--location', help='Path to Tredlyfile. Can be HTTP(S) or a local directory.')
argParser.add_argument('-d', '--debug', action='store_true', help='Enable debug mode')
argParser.add_argument('--verbose', action='store_true', help='Enable verbose mode')
argParser.add_argument('-v', '--version', action='store_true', help='Show version')

# parse args
args = argParser.parse_args()

# If version requested then display and exit
if (args.version):
    # print the version
    print(SCRIPTNAME + ": version " + VERSION_NUMBER + " (built " + VERSION_DATE + ")")
    exit(0)

# enable debug mode if requested
if (args.debug):
    DEBUG = True

# enable verbose mode if requested
if (args.verbose):
    VERBOSE = True

# set up a dict to pass to actions
actionArgs = {}

# default partition name is "default"
actionArgs['partitionName'] = "default"
actionArgs['path'] = None

# see if --location was passed and check if its a local or remote path
# if not set then assume current directory for path
if (args.location is None):
    # no location given, use the current directory
    actionArgs['path'] = "./"
else:
    if (os.path.isdir(args.location)):    # check local path
        # find the tredlyfile
        actionArgs['path'] = args.location
    else:
        e_error("Directory " + args.location + " not found")
        exit(1)

# find the tredlyfile
tredlyFilePath = findTredlyFile(actionArgs['path'])

# assign actionargs path
actionArgs['path'] = tredlyFilePath

# try loading the action module
try:
    # dynamically load the module
    mod = importlib.import_module("actions." + args.action.lower())
except ImportError as e:
    e_error('No action "' + args.action.lower() + '" found.')
    exit(1)

# get a handle to the module
actionMod = getattr(mod, "Action" + args.action[0].upper() + args.action[1:].lower())

# initialise the object and run the command
actionObj = actionMod(args.subject, args.target, args.identifier, actionArgs)

# exit with code 0 if we reached this point
exit(0)
