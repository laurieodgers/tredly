#!/usr/bin/env bash

# commands require running as root
cmn_assert_running_as_root

show_help "Available Commands:
    container
    ---------
    Description:
        Configures the default subnet for containers.

    Examples:
        $(basename "$0") config container subnet 10.1.0.0/24

    host
    ---------
    Description:
        Configures the Tredly host.

    Subcommands:
        network - configures the given interface with ip address and gateway

    Examples:
        $(basename "$0") config host network em0 192.168.150.20/24 192.168.156.254
        $(basename "$0") config host gateway 192.168.150.254
        $(basename "$0") config host hostname myhost

"

case "${_SUBCOMMANDS[0]}" in
    api)
        case "${_SUBCOMMANDS[1]}" in
            init)
                if [[ ${#_SUBCOMMANDS[@]} -gt 1 ]]; then
                    exit_with_error "Too many arguments received."
                fi
                cd /usr/local/sbin/tredly-api
                npm run config
            ;;
            password)
                # run the tredlyapi credentials command
                service tredlyapi credentials
            ;;
            whitelist)
                # check the number of args received
                if [[ ${#_SUBCOMMANDS[@]} -gt 4 ]]; then
                    exit_with_error "Too many arguments received."
                fi
                
                if [[ "${_SUBCOMMANDS[2]}" == 'clear' ]]; then
                    ipfw table 20 flush
                    if [[ $? -eq 0 ]]; then
                        e_success "Success"
                    else
                        e_error "Failed"
                    fi
                else
                    # add the ipfw rule for tredly-api
                    ipfw_add_persistent_table_member "" "20" "${_SUBCOMMANDS[2]}"
                    if [[ $? -eq 0 ]]; then
                        e_success "Success"
                    else
                        e_error "Failed"
                    fi
                fi
                
            ;;
            *)
                exit_with_error "Unknown config api command '${_SUBCOMMANDS[1]}'"
            ;;
        esac
    ;;
    container)
        case "${_SUBCOMMANDS[1]}" in
            subnet)
                # check the number of args received
                if [[ ${#_SUBCOMMANDS[@]} -gt 3 ]]; then
                    exit_with_error "Too many arguments received."
                fi

                # update the subnet config data
                ip4_set_container_subnet "${_SUBCOMMANDS[2]}"
            ;;
            *)
                exit_with_error "Unknown config container command '${_SUBCOMMANDS[1]}'"
            ;;
        esac
    ;;
    host)
        case "${_SUBCOMMANDS[1]}" in
            DNS)
                tredly-host config ${_SUBCOMMANDS[@]} ${_ENTIREFLAGS}
            ;;
            hostname)
                # check the number of args received
                if [[ ${#_SUBCOMMANDS[@]} -gt 3 ]]; then
                    exit_with_error "Too many arguments received."
                fi

                # update the hosts hostname
                ip4_set_host_hostname "${_SUBCOMMANDS[2]}"
            ;;
            gateway)
                # check the number of args received
                if [[ ${#_SUBCOMMANDS[@]} -gt 3 ]]; then
                    exit_with_error "Too many arguments received."
                fi

                # update the hosts gateway
                ip4_set_host_gateway "${_SUBCOMMANDS[2]}"
            ;;
            network)
                # check the number of args received
                if [[ ${#_SUBCOMMANDS[@]} -gt 5 ]]; then
                    exit_with_error "Too many arguments received."
                fi
                if [[ ${#_SUBCOMMANDS[@]} -lt 5 ]]; then
                    exit_with_error "Too few arguments received."
                fi
                # update the network
                ip4_set_host_network "${_SUBCOMMANDS[2]}" "${_SUBCOMMANDS[3]}"
                # update the hosts gateway
                ip4_set_host_gateway "${_SUBCOMMANDS[4]}"
            ;;
            *)
                exit_with_error "Unknown config host command '${_SUBCOMMANDS[1]}'"
            ;;
        esac
    ;;
    *)
        exit_with_error "Unknown config command '${_SUBCOMMANDS[0]}'"
    ;;
esac
