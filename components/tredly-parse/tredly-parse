#!/usr/local/bin/python3.5

# import modules
import builtins
import argparse
import os.path
import sys
import signal
import urllib.request
import tarfile
import ssl
import importlib

# capture the sigint handler
def sigintHandler(signal, frame):
    print('')
    print('SIGINT caught. Exiting...')
    # http://www.tldp.org/LDP/abs/html/exitcodes.html
    exit(130)

# catch sigint
signal.signal(signal.SIGINT, sigintHandler)

# set the path to the directory containing this script
builtins.scriptDirectory = os.path.dirname(os.path.realpath(__file__))

# work out whether this is an installed or non installed version
# and include this scripts directories in the path

if (builtins.scriptDirectory == "/usr/local/sbin"):
    sys.path.insert(0, "/usr/local/lib/tredly-parse")
    sys.path.insert(0, "/usr/local/lib/tredly/python-common")
    builtins.tredlyConfDirectory = "/usr/local/etc/tredly-parse"
    builtins.tredlyJsonDirectory = "/usr/local/etc/tredly/json"
else:
    print("\033[43m\033[97mWARNING: Running from non installed location\033[49m\033[39m")
    sys.path.insert(0, builtins.scriptDirectory)
    sys.path.insert(0, builtins.scriptDirectory + "/../tredly-libs/python-common")
    builtins.tredlyConfDirectory = builtins.scriptDirectory + "/conf"
    builtins.tredlyJsonDirectory = builtins.scriptDirectory + "/../tredly-build/json"

# include global modules
from includes.defines import *
from includes.util import *
from includes.output import *

# set some constants
SHOW_HELP = False
DEBUG = False
VERBOSE= False
SCRIPTNAME = os.path.basename(__file__)

# get an argparser object
argParser = argparse.ArgumentParser(description=SCRIPTNAME)

# set up arguments in argparser
argParser.add_argument('action', nargs='?', help='init create destroy list modify replace')
argParser.add_argument('subject', nargs='?', help='container etc')
argParser.add_argument('target', nargs='?', help='partition etc')
argParser.add_argument('identifier', nargs='?', help='identifier - uuid etc')

argParser.add_argument('--env', help='Used when determining destination URL. Not required if --dir is set.')
argParser.add_argument('--src', help='Optional. Set the source folder. Defaults to current working directory (.). This is also where the Tredlyfile MUST reside.')
argParser.add_argument('--dir', help='Optional. Override the destination directory name. Ignores Tredlyfile')
argParser.add_argument('--debug', nargs='*', help='added for compatibility')
argParser.add_argument('--sub', nargs='*', help='Optional. Key=Value pair to substitute in the file. Eg --sub {{ENV}}=stage')
argParser.add_argument('--subCleanDots', nargs='*', help='Optional. Key=Value pair to substitute in the file, if string to sub with is empty this will also clean up double dots. Useful for domains. Eg --subCleanDots {{ENV}}=stage')
argParser.add_argument('-v', '--version', action='store_true', help='Show version')

# parse args
args = argParser.parse_args()

actionArgs = {}


# If version requested then display and exit
if (args.action == "version"):
    # print the version
    print(SCRIPTNAME + ": version " + VERSION_NUMBER + " (built " + VERSION_DATE + ")")
    exit(0)

# set our action args
actionArgs['dir'] = args.dir
actionArgs['env'] = args.env
actionArgs['src'] = args.src
actionArgs['sub'] = args.sub
actionArgs['subCleanDots'] = args.subCleanDots

# try loading the action module
try:
    # dynamically load the module
    mod = importlib.import_module("actions." + args.action.lower())
except ImportError as e:
    e_error('No action "' + args.action.lower() + '" found.')
    exit(1)

# get a handle to the module
actionMod = getattr(mod, "Action" + args.action[0].upper() + args.action[1:].lower())

# initialise the object and run the command
actionObj = actionMod(args.subject, args.target, args.identifier, actionArgs)

# exit with code 0 if we reached this point
exit(0)
